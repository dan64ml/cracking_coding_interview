/*********************************************************************************
 * Имеется набор ящиков с известными размерами. Ящики можно складывать штабелями,
 * но каждый верхний ящик должен быть по всем измерениям строго меньше нижнего.
 * Найти максимальную высоту штабеля.
 ********************************************************************************/

#include "chapter_8.h"

#include <vector>
#include <algorithm>

using namespace std;

namespace ch08 {

// Брутфорс понятен - генерируем рекурсивно все допустимые перестановки ящиков и смотрим
// максимальную высоту. Надежно и неэффективно.
// Задать полный порядок на множестве ящиков нельза, но можно отсортировать по одному 
// измерению. В этом случае искомая последовательность ящиков - подпоследовательность
// нашего отсортированного множества. Фактически задача сводится к поиску допустимой
// подпоследовательности с максимальной суммой высот. 
int MaxHeight(vector<Box> box) {
    sort(begin(box), end(box), [](const auto& l, const auto& r){ return l.x > r.x; });
    vector<int> mem(box.size(), 0);

    int max_height = -1;
    for (size_t k = 0; k < box.size(); ++k) {
        mem[k] = box[k].z;

        for (size_t i = 0; i < k; ++i) {
            if (box[k].y < box[i].y && box[k].z < box[i].z) {
                mem[k] = max(mem[k], mem[i] + box[k].z);
            }
        }

        max_height = max(max_height, mem[k]);
    }

    return max_height;
}

} // namespace ch08
