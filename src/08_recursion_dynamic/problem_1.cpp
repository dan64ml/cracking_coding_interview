/*********************************************************************************
 * Ребенок поднимается по лестнице из N ступенек. За шаг он может шагнуть на одну,
 * две или три ступени. Посчитать количество возможных вариантов перемещения по
 * лестнице.
 ********************************************************************************/

#include "chapter_8.h"

#include <vector>

using namespace std;

namespace ch08 {

int PathNumberHelper(vector<int>& mem, int n) {
    if (n < 0) {
        return 0;
    }

    if (mem[n] < 0) {
        mem[n] = PathNumberHelper(mem, n - 1) + PathNumberHelper(mem, n - 2)
            + PathNumberHelper(mem, n - 3);
    }

    return mem[n];
}

// Класическая динамика. Структура решения: Num(n) = Num(n - 1) + Num(n - 2) + Num(n - 3).
// Т.е. количество вариантов запрыгнуть на н-ную ступеньку это сумма вариантов оказаться
// на трех предыдущих. Важно понять, что последний шаг с любой из этих ступеней не увеличивает
// количество вариантов, он увеличивает только количество сделанных шагов. Второй важный момент -
// начальные условия. Для n < 0 количество вариантов, очевидно, ноль. Для n = 0 логичным кажется
// ноль, но в этом случае придется рассматривать случаи для n = 1, 2 и 3. Можно задать его равным
// единице, по факту это количество вариантов попасть на ПЕРВУЮ ступень.
// Техническая реализация - восходящая с мемоизацией.
int PathNumber(int n) {
    vector<int> mem(n + 1, -1);
    mem[0] = 1;

    return PathNumberHelper(mem, n);
}

} // namespace ch08